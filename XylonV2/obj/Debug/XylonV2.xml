<?xml version="1.0"?>
<doc>
<assembly>
<name>
XylonV2
</name>
</assembly>
<members>
<member name="T:XylonV2.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:XylonV2.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:XylonV2.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:XylonV2.My.Resources.Resources.dnlib">
<summary>
  Looks up a localized resource of type System.Byte[].
</summary>
</member>
<member name="P:XylonV2.My.Resources.Resources.Microsoft_Win32_TaskScheduler">
<summary>
  Looks up a localized resource of type System.Byte[].
</summary>
</member>
<member name="M:XylonV2.Core.Engine.Watcher.DefenderWatcher.#ctor(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of <see cref="T:XylonV2.Core.Engine.Watcher.DefenderWatcher"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:XylonV2.Core.Engine.Watcher.DefenderWatcher.IsRunning">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value that determines whether the monitor is running.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:XylonV2.Core.Engine.Watcher.DefenderWatcher.events">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A list of event delegates.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.DefenderWatcher.Start">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Starts monitoring.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.Exception">
 Monitor is already running.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.DefenderWatcher.Stop">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Stops monitoring.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.Exception">
 Monitor is already stopped.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:XylonV2.Core.Engine.Watcher.DefenderWatcher.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 To detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.DefenderWatcher.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.DefenderWatcher.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.FileWatcherExtended.#ctor(System.IO.FileSystemWatcher)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of <see cref="T:XylonV2.Core.Engine.Watcher.DefenderWatcher"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:XylonV2.Core.Engine.Watcher.FileWatcherExtended.IsRunning">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value that determines whether the monitor is running.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:XylonV2.Core.Engine.Watcher.FileWatcherExtended.events">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A list of event delegates.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.FileWatcherExtended.Start">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Starts monitoring.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.Exception">
 Monitor is already running.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.FileWatcherExtended.Stop">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Stops monitoring.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.Exception">
 Monitor is already stopped.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:XylonV2.Core.Engine.Watcher.FileWatcherExtended.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 To detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.FileWatcherExtended.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.FileWatcherExtended.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:XylonV2.Core.Engine.Watcher.DriveWatcher">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A device insertion and removal monitor.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:XylonV2.Core.Engine.Watcher.DriveWatcher.Drives">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the connected drives on this computer.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:XylonV2.Core.Engine.Watcher.DriveWatcher.IsRunning">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value that determines whether the monitor is running.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:XylonV2.Core.Engine.Watcher.DriveWatcher.events">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A list of event delegates.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="E:XylonV2.Core.Engine.Watcher.DriveWatcher.DriveStatusChanged">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Occurs when a drive is inserted, removed, or changed.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:XylonV2.Core.Engine.Watcher.DriveWatcher.DriveStatusChangedEventArgs">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains the event-data of a <see cref="E:XylonV2.Core.Engine.Watcher.DriveWatcher.DriveStatusChanged"/> event.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:XylonV2.Core.Engine.Watcher.DriveWatcher.DriveStatusChangedEventArgs.DeviceEvent">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the device event that occurred.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The drive info.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:XylonV2.Core.Engine.Watcher.DriveWatcher.DriveStatusChangedEventArgs.deviceEventsB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The device event that occurred.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:XylonV2.Core.Engine.Watcher.DriveWatcher.DriveStatusChangedEventArgs.DriveInfo">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the drive info.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The drive info.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:XylonV2.Core.Engine.Watcher.DriveWatcher.DriveStatusChangedEventArgs.driveInfoB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The drive info.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.DriveWatcher.DriveStatusChangedEventArgs.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:XylonV2.Core.Engine.Watcher.DriveWatcher.DriveStatusChangedEventArgs"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.DriveWatcher.DriveStatusChangedEventArgs.#ctor(XylonV2.Core.Engine.Watcher.DriveWatcher.DeviceEvents,System.IO.DriveInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:XylonV2.Core.Engine.Watcher.DriveWatcher.DriveStatusChangedEventArgs"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="driveInfo">
 The drive info.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.DriveWatcher.OnDriveStatusChanged(XylonV2.Core.Engine.Watcher.DriveWatcher.DriveStatusChangedEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Raises <see cref="E:XylonV2.Core.Engine.Watcher.DriveWatcher.DriveStatusChanged"/> event.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="e">
 The <see cref="T:XylonV2.Core.Engine.Watcher.DriveWatcher.DriveStatusChangedEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:XylonV2.Core.Engine.Watcher.DriveWatcher.DeviceEvents">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a change to the hardware configuration of a device.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa363480%28v=vs.85%29.aspx"/>
 <para></para>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa363232%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:XylonV2.Core.Engine.Watcher.DriveWatcher.DeviceEvents.Change">
 <summary>
 The current configuration has changed, due to a dock or undock.
 </summary>
</member>
<member name="F:XylonV2.Core.Engine.Watcher.DriveWatcher.DeviceEvents.Arrival">
 <summary>
 A device or piece of media has been inserted and becomes available.
 </summary>
</member>
<member name="F:XylonV2.Core.Engine.Watcher.DriveWatcher.DeviceEvents.QueryRemove">
 <summary>
 Request permission to remove a device or piece of media.
 <para></para>
 This message is the last chance for applications and drivers to prepare for this removal.
 However, any application can deny this request and cancel the operation.
 </summary>
</member>
<member name="F:XylonV2.Core.Engine.Watcher.DriveWatcher.DeviceEvents.QueryRemoveFailed">
 <summary>
 A request to remove a device or piece of media has been canceled.
 </summary>
</member>
<member name="F:XylonV2.Core.Engine.Watcher.DriveWatcher.DeviceEvents.RemovePending">
 <summary>
 A device or piece of media is being removed and is no longer available for use.
 </summary>
</member>
<member name="F:XylonV2.Core.Engine.Watcher.DriveWatcher.DeviceEvents.RemoveComplete">
 <summary>
 A device or piece of media has been removed.
 </summary>
</member>
<member name="T:XylonV2.Core.Engine.Watcher.DriveWatcher.DeviceType">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a computer device type.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa363246%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:XylonV2.Core.Engine.Watcher.DriveWatcher.DeviceType.Logical">
 <summary>
 Logical volume.
 </summary>
</member>
<member name="T:XylonV2.Core.Engine.Watcher.DriveWatcher.DevBroadcastVolume">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains information about a logical volume.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa363249%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:XylonV2.Core.Engine.Watcher.DriveWatcher.DevBroadcastVolume.Size">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The size of this structure, in bytes.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:XylonV2.Core.Engine.Watcher.DriveWatcher.DevBroadcastVolume.Type">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Set to DBT_DEVTYP_VOLUME (2).
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:XylonV2.Core.Engine.Watcher.DriveWatcher.DevBroadcastVolume.Reserved">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Reserved parameter; do not use this.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:XylonV2.Core.Engine.Watcher.DriveWatcher.DevBroadcastVolume.Mask">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The logical unit mask identifying one or more logical units.
 Each bit in the mask corresponds to one logical drive.
 Bit 0 represents drive A, bit 1 represents drive B, and so on.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:XylonV2.Core.Engine.Watcher.DriveWatcher.DevBroadcastVolume.Flags">
 ----------------------------------------------------------------------------------------------------
 <summary>
 This parameter can be one of the following values:
 '0x0001': Change affects media in drive. If not set, change affects physical device or drive.
 '0x0002': Indicated logical volume is a network volume.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.DriveWatcher.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of <see cref="T:XylonV2.Core.Engine.Watcher.DriveWatcher"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.DriveWatcher.Start">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Starts monitoring.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.Exception">
 Monitor is already running.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.DriveWatcher.Stop">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Stops monitoring.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.Exception">
 Monitor is already stopped.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.DriveWatcher.GetDriveLetter(XylonV2.Core.Engine.Watcher.DriveWatcher.DevBroadcastVolume)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the drive letter stored in a <see cref="T:XylonV2.Core.Engine.Watcher.DriveWatcher.DevBroadcastVolume"/> structure.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="Device">
 The <see cref="T:XylonV2.Core.Engine.Watcher.DriveWatcher.DevBroadcastVolume"/> structure containing the device mask.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The drive letter.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.DriveWatcher.WndProc(System.Windows.Forms.Message@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Invokes the default window procedure associated with this window to process messages for this Window.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="m">
 A <see cref="T:System.Windows.Forms.Message"/> that is associated with the current Windows message.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.DriveWatcher.GetHashCode">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Serves as a hash function for a particular type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.DriveWatcher.GetType">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the <see cref="T:System.Type"/> of the current instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The exact runtime type of the current instance.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.DriveWatcher.Equals(System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> instances are considered equal.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.DriveWatcher.ToString">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a String that represents the current object.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.DriveWatcher.AssignHandle(System.IntPtr)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Assigns a handle to this window.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.DriveWatcher.CreateHandle(System.Windows.Forms.CreateParams)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Creates a window and its handle with the specified creation parameters.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.DriveWatcher.DestroyHandle">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Destroys the window and its handle.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.DriveWatcher.ReleaseHandle">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases the handle associated with this window.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.DriveWatcher.GetLifeTimeService">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Retrieves the current lifetime service object that controls the lifetime policy for this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.DriveWatcher.InitializeLifeTimeService">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Obtains a lifetime service object to control the lifetime policy for this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.DriveWatcher.CreateObjRef(System.Type)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Creates an object that contains all the relevant information to generate a proxy used to communicate with a remote object.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.DriveWatcher.DefWndProc(System.Windows.Forms.Message@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Invokes the default window procedure associated with this window.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:XylonV2.Core.Engine.Watcher.DriveWatcher.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 To detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.DriveWatcher.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.DriveWatcher.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:XylonV2.Core.Engine.Watcher.ProcessWatcher">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A device insertion and removal monitor.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.ProcessWatcher.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of <see cref="T:XylonV2.Core.Engine.Watcher.ProcessWatcher"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:XylonV2.Core.Engine.Watcher.ProcessWatcher.IsRunning">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value that determines whether the monitor is running.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:XylonV2.Core.Engine.Watcher.ProcessWatcher.events">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A list of event delegates.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="E:XylonV2.Core.Engine.Watcher.ProcessWatcher.ProcessStatusChanged">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Occurs when a drive is inserted, removed, or changed.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.ProcessWatcher.OnProcessStatusChanged(XylonV2.Core.Engine.Watcher.ProcessWatcher.ProcessStatusChangedEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Raises <see cref="E:XylonV2.Core.Engine.Watcher.ProcessWatcher.ProcessStatusChanged"/> event.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="e">
 The <see cref="T:XylonV2.Core.Engine.Watcher.ProcessWatcher.ProcessStatusChangedEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:XylonV2.Core.Engine.Watcher.ProcessWatcher.ProcessStatusChangedEventArgs">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains the event-data of a <see cref="E:XylonV2.Core.Engine.Watcher.ProcessWatcher.ProcessStatusChanged"/> event.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:XylonV2.Core.Engine.Watcher.ProcessWatcher.ProcessStatusChangedEventArgs.ProcessEvent">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the device event that occurred.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The drive info.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:XylonV2.Core.Engine.Watcher.ProcessWatcher.ProcessStatusChangedEventArgs.ProcessEventsB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The device event that occurred.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:XylonV2.Core.Engine.Watcher.ProcessWatcher.ProcessStatusChangedEventArgs.ProcessInfo">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the drive info.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The drive info.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:XylonV2.Core.Engine.Watcher.ProcessWatcher.ProcessStatusChangedEventArgs.ProcessInfoB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The drive info.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.ProcessWatcher.ProcessStatusChangedEventArgs.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:XylonV2.Core.Engine.Watcher.ProcessWatcher.ProcessStatusChangedEventArgs"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.ProcessWatcher.ProcessStatusChangedEventArgs.#ctor(XylonV2.Core.Engine.Watcher.ProcessWatcher.ProcessEvents,System.Diagnostics.Process)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:XylonV2.Core.Engine.Watcher.ProcessWatcher.ProcessStatusChangedEventArgs"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ProcessInfo">
 The Process info.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:XylonV2.Core.Engine.Watcher.ProcessWatcher.ProcessEvents.Arrival">
 <summary>
 A device or piece of media has been inserted and becomes available.
 </summary>
</member>
<member name="F:XylonV2.Core.Engine.Watcher.ProcessWatcher.ProcessEvents.Stopped">
 <summary>
 Request permission to remove a device or piece of media.
 <para></para>
 This message is the last chance for applications and drivers to prepare for this removal.
 However, any application can deny this request and cancel the operation.
 </summary>
</member>
<member name="M:XylonV2.Core.Engine.Watcher.ProcessWatcher.Start">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Starts monitoring.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.Exception">
 Monitor is already running.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.ProcessWatcher.Stop">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Stops monitoring.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.Exception">
 Monitor is already stopped.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:XylonV2.Core.Engine.Watcher.ProcessWatcher.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 To detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.ProcessWatcher.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.ProcessWatcher.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:XylonV2.Core.Engine.Watcher.RegeditWatcher">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A device insertion and removal monitor.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.RegeditWatcher.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of <see cref="T:XylonV2.Core.Engine.Watcher.RegeditWatcher"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:XylonV2.Core.Engine.Watcher.RegeditWatcher.IsRunning">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value that determines whether the monitor is running.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:XylonV2.Core.Engine.Watcher.RegeditWatcher.events">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A list of event delegates.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="E:XylonV2.Core.Engine.Watcher.RegeditWatcher.ProcessStatusChanged">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Occurs when a drive is inserted, removed, or changed.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.RegeditWatcher.OnProcessStatusChanged(XylonV2.Core.Engine.Watcher.RegeditWatcher.ProcessStatusChangedEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Raises <see cref="E:XylonV2.Core.Engine.Watcher.RegeditWatcher.ProcessStatusChanged"/> event.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="e">
 The <see cref="T:XylonV2.Core.Engine.Watcher.RegeditWatcher.ProcessStatusChangedEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:XylonV2.Core.Engine.Watcher.RegeditWatcher.ProcessStatusChangedEventArgs">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains the event-data of a <see cref="E:XylonV2.Core.Engine.Watcher.RegeditWatcher.ProcessStatusChanged"/> event.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:XylonV2.Core.Engine.Watcher.RegeditWatcher.ProcessStatusChangedEventArgs.ProcessEvent">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the device event that occurred.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The drive info.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:XylonV2.Core.Engine.Watcher.RegeditWatcher.ProcessStatusChangedEventArgs.ProcessEventsB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The device event that occurred.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:XylonV2.Core.Engine.Watcher.RegeditWatcher.ProcessStatusChangedEventArgs.ProcessInfo">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the drive info.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The drive info.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:XylonV2.Core.Engine.Watcher.RegeditWatcher.ProcessStatusChangedEventArgs.ProcessInfoB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The drive info.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.RegeditWatcher.ProcessStatusChangedEventArgs.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:XylonV2.Core.Engine.Watcher.RegeditWatcher.ProcessStatusChangedEventArgs"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.RegeditWatcher.ProcessStatusChangedEventArgs.#ctor(XylonV2.Core.Engine.Watcher.RegeditWatcher.ProcessEvents,System.Diagnostics.Process)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:XylonV2.Core.Engine.Watcher.RegeditWatcher.ProcessStatusChangedEventArgs"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ProcessInfo">
 The Process info.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:XylonV2.Core.Engine.Watcher.RegeditWatcher.ProcessEvents.Arrival">
 <summary>
 A device or piece of media has been inserted and becomes available.
 </summary>
</member>
<member name="F:XylonV2.Core.Engine.Watcher.RegeditWatcher.ProcessEvents.Stopped">
 <summary>
 Request permission to remove a device or piece of media.
 <para></para>
 This message is the last chance for applications and drivers to prepare for this removal.
 However, any application can deny this request and cancel the operation.
 </summary>
</member>
<member name="M:XylonV2.Core.Engine.Watcher.RegeditWatcher.Start">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Starts monitoring.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.Exception">
 Monitor is already running.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.RegeditWatcher.Stop">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Stops monitoring.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.Exception">
 Monitor is already stopped.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:XylonV2.Core.Engine.Watcher.RegeditWatcher.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 To detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.RegeditWatcher.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.Core.Engine.Watcher.RegeditWatcher.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and - optionally - managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:XylonV2.Core.Engine.Watcher.RegistryMonitor.RegChangeNotifyFilter">
 <summary>
 Filter for notifications reported by <see cref="T:XylonV2.Core.Engine.Watcher.RegistryMonitor"/>.
 </summary>
</member>
<member name="F:XylonV2.Core.Engine.Watcher.RegistryMonitor.RegChangeNotifyFilter.Key">
 <summary>Notify the caller if a subkey is added or deleted.</summary>
</member>
<member name="F:XylonV2.Core.Engine.Watcher.RegistryMonitor.RegChangeNotifyFilter.Attribute">
 <summary>Notify the caller of changes to the attributes of the key,
 such as the security descriptor information.</summary>
</member>
<member name="F:XylonV2.Core.Engine.Watcher.RegistryMonitor.RegChangeNotifyFilter.Value">
 <summary>Notify the caller of changes to a value of the key. This can
 include adding Or deleting a value, Or changing an existing value.</summary>
</member>
<member name="F:XylonV2.Core.Engine.Watcher.RegistryMonitor.RegChangeNotifyFilter.Security">
 <summary>Notify the caller of changes to the security descriptor
 of the key.</summary>
</member>
<member name="T:XylonV2.FileDirSearcher">
 <summary>
 Searchs for files and directories.
 </summary>
</member>
<member name="M:XylonV2.FileDirSearcher.GetFiles(System.String,System.IO.SearchOption,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
 <summary>
 Gets the files those matches the criteria inside the specified directory and/or sub-directories.
 </summary>
 <param name="dirPath">The root directory path to search for files.</param>
 <param name="searchOption">The searching mode.</param>
 <param name="fileNamePatterns">The file name pattern(s) to match.</param>
 <param name="fileExtPatterns">The file extension pattern(s) to match.</param>
 <param name="ignoreCase">If <c>True</c>, ignores the comparing case of <paramref name="fileNamePatterns"/> and <paramref name="fileExtPatterns"/> patterns.</param>
 <param name="throwOnError">Determines whether exceptions will be thrown, like access denied to file or directory.</param>
 <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing the files information.</returns>
 <exception cref="T:System.ArgumentException">dirPath or searchOption</exception>
</member>
<member name="M:XylonV2.FileDirSearcher.GetFilePaths(System.String,System.IO.SearchOption,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
 <summary>
 Gets the filepaths those matches the criteria inside the specified directory and/or sub-directories.
 </summary>
 <param name="dirPath">The root directory path to search for files.</param>
 <param name="searchOption">The searching mode.</param>
 <param name="fileNamePatterns">The file name pattern(s) to match.</param>
 <param name="fileExtPatterns">The file extension pattern(s) to match.</param>
 <param name="ignoreCase">If <c>True</c>, ignores the comparing case of <paramref name="fileNamePatterns"/> and <paramref name="fileExtPatterns"/> patterns.</param>
 <param name="throwOnError">Determines whether exceptions will be thrown, like access denied to file or directory.</param>
 <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing the filepaths.</returns>
 <exception cref="T:System.ArgumentException">dirPath or searchOption</exception>
</member>
<member name="M:XylonV2.FileDirSearcher.GetDirs(System.String,System.IO.SearchOption,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
 <summary>
 Gets the directories those matches the criteria inside the specified directory and/or sub-directories.
 </summary>
 <param name="dirPath">The root directory path to search for directories.</param>
 <param name="searchOption">The searching mode.</param>
 <param name="dirPathPatterns">The directory path pattern(s) to match.</param>
 <param name="dirNamePatterns">The directory name pattern(s) to match.</param>
 <param name="ignoreCase">If <c>True</c>, ignores the comparing case of <paramref name="dirPathPatterns"/> and <paramref name="dirNamePatterns"/> patterns.</param>
 <param name="throwOnError">Determines whether exceptions will be thrown, like access denied to directory.</param>
 <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing the dirrectories information.</returns>
 <exception cref="T:System.ArgumentException">dirPath or searchOption</exception>
</member>
<member name="M:XylonV2.FileDirSearcher.GetDirPaths(System.String,System.IO.SearchOption,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
 <summary>
 Gets the filepaths those matches the criteria inside the specified directory and/or sub-directories.
 </summary>
 <param name="dirPath">The root directory path to search for directories.</param>
 <param name="searchOption">The searching mode.</param>
 <param name="dirPathPatterns">The directory path pattern(s) to match.</param>
 <param name="dirNamePatterns">The directory name pattern(s) to match.</param>
 <param name="ignoreCase">If <c>True</c>, ignores the comparing case of <paramref name="dirPathPatterns"/> and <paramref name="dirNamePatterns"/> patterns.</param>
 <param name="throwOnError">Determines whether exceptions will be thrown, like access denied to directory.</param>
 <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing the directory paths.</returns>
 <exception cref="T:System.ArgumentException">dirPath or searchOption</exception>
</member>
<member name="M:XylonV2.FileDirSearcher.AnalyzePath(System.String@)">
 <summary>
 Analyzes a directory path and perform specific changes on it.
 </summary>
 <param name="dirPath">The directory path.</param>
 <exception cref="T:System.ArgumentNullException">dirPath;Value is null, empty, or white-spaced.</exception>
</member>
<member name="M:XylonV2.FileDirSearcher.CollectFiles(System.Collections.Concurrent.ConcurrentQueue{System.IO.FileInfo},System.String,System.IO.SearchOption,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
 <summary>
 Collects the files those matches the criteria inside the specified directory and/or sub-directories.
 </summary>
 <param name="queue">The <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> instance to enqueue new files.</param>
 <param name="dirPath">The root directory path to search for files.</param>
 <param name="searchOption">The searching mode.</param>
 <param name="fileNamePatterns">The file name pattern(s) to match.</param>
 <param name="fileExtPatterns">The file extension pattern(s) to match.</param>
 <param name="ignoreCase">If <c>True</c>, ignores the comparing case of <paramref name="fileNamePatterns"/> and <paramref name="fileExtPatterns"/> patterns.</param>
 <param name="throwOnError">Determines whether exceptions will be thrown, like access denied to file or directory.</param>
</member>
<member name="M:XylonV2.FileDirSearcher.CollectFilePaths(System.Collections.Concurrent.ConcurrentQueue{System.String},System.String,System.IO.SearchOption,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
 <summary>
 Collects the filepaths those matches the criteria inside the specified directory and/or sub-directories.
 </summary>
 <param name="queue">The <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> instance to enqueue new filepaths.</param>
 <param name="dirPath">The root directory path to search for files.</param>
 <param name="searchOption">The searching mode.</param>
 <param name="fileNamePatterns">The file name pattern(s) to match.</param>
 <param name="fileExtPatterns">The file extension pattern(s) to match.</param>
 <param name="ignoreCase">If <c>True</c>, ignores the comparing case of <paramref name="fileNamePatterns"/> and <paramref name="fileExtPatterns"/> patterns.</param>
 <param name="throwOnError">Determines whether exceptions will be thrown, like access denied to file or directory.</param>
</member>
<member name="M:XylonV2.FileDirSearcher.CollectDirs(System.Collections.Concurrent.ConcurrentQueue{System.IO.DirectoryInfo},System.String,System.IO.SearchOption,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
 <summary>
 Collects the directories those matches the criteria inside the specified directory and/or sub-directories.
 </summary>
 <param name="queue">The <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> instance to enqueue new directories.</param>
 <param name="dirPath">The root directory path to search for directories.</param>
 <param name="searchOption">The searching mode.</param>
 <param name="dirPathPatterns">The directory path pattern(s) to match.</param>
 <param name="dirNamePatterns">The directory name pattern(s) to match.</param>
 <param name="ignoreCase">If <c>True</c>, ignores the comparing case of <paramref name="dirPathPatterns"/> and <paramref name="dirNamePatterns"/> patterns.</param>
 <param name="throwOnError">Determines whether exceptions will be thrown, like access denied to directory.</param>
</member>
<member name="M:XylonV2.FileDirSearcher.CollectDirPaths(System.Collections.Concurrent.ConcurrentQueue{System.String},System.String,System.IO.SearchOption,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
 <summary>
 Collects the directory paths those matches the criteria inside the specified directory and/or sub-directories.
 </summary>
 <param name="queue">The <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> instance to enqueue new directory paths.</param>
 <param name="dirPath">The root directory path to search for directories.</param>
 <param name="searchOption">The searching mode.</param>
 <param name="dirPathPatterns">The directory path pattern(s) to match.</param>
 <param name="dirNamePatterns">The directory name pattern(s) to match.</param>
 <param name="ignoreCase">If <c>True</c>, ignores the comparing case of <paramref name="dirPathPatterns"/> and <paramref name="dirNamePatterns"/> patterns.</param>
 <param name="throwOnError">Determines whether exceptions will be thrown, like access denied to directory.</param>
</member>
<member name="T:XylonV2.FileType">
 <summary>
 Little data structure to hold information about file types. 
 Holds information about binary header at the start of the file
 </summary>
</member>
<member name="M:XylonV2.FileType.#ctor(System.Nullable{System.Byte}[],System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:XylonV2.FileType"/> class.
 Default construction with the header offset being set to zero by default
 </summary>
 <param name="header">Byte array with header.</param>
 <param name="extension">String with extension.</param>
 <param name="mime">The description of MIME.</param>
</member>
<member name="M:XylonV2.FileType.#ctor(System.Nullable{System.Byte}[],System.Int32,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:XylonV2.FileType"/> struct.
 Takes the details of offset for the header
 </summary>
 <param name="header">Byte array with header.</param>
 <param name="offset">The header offset - how far into the file we need to read the header</param>
 <param name="extension">String with extension.</param>
 <param name="mime">The description of MIME.</param>
</member>
<member name="T:XylonV2.FileTypeDetective">
 <summary>
 Helper class to identify file type by the file header, not file extension.
 </summary>
 
</member>
<member name="M:XylonV2.FileTypeDetective.#ctor">
 <summary>
 Prevents a default instance of the <see cref="T:XylonV2.FileTypeDetective"/> class from being created.
 </summary>
</member>
<member name="M:XylonV2.FileTypeDetective.GetFileTypesByExtensions(System.String)">
 <summary>
 Gets the list of FileTypes based on list of extensions in Comma-Separated-Values string
 </summary>
 <param name="CSV">The CSV String with extensions</param>
 <returns>List of FileTypes</returns>
</member>
<member name="M:XylonV2.FileTypeDetective.ReadFileHeader(System.IO.FileInfo,System.Int32)">
 <summary>
 Reads the file header - first (16) bytes from the file
 </summary>
 <param name="file">The file to work with</param>
 <returns>Array of bytes</returns>
</member>
<member name="M:XylonV2.FileTypeDetective.GetFileType(System.IO.FileInfo)">
 <summary>
 Read header of a file and depending on the information in the header
 return object FileType.
 Return null in case when the file type is not identified. 
 Throws Application exception if the file can not be read or does not exist
 </summary>
 <param name="file">The FileInfo object.</param>
 <returns>FileType or null not identified</returns>
</member>
<member name="M:XylonV2.FileTypeDetective.GetFileType(System.String)">
 <summary>
 Read header of a file and depending on the information in the header
 return object FileType.
 Return null in case when the file type is not identified. 
 Throws Application exception if the file can not be read or does not exist
 </summary>
 <param name="file">The FileInfo object.</param>
 <returns>FileType or null not identified</returns>
</member>
<member name="M:XylonV2.FileTypeDetective.isFileOfTypes(System.IO.FileInfo,System.Collections.Generic.List{XylonV2.FileType})">
 <summary>
 Determines whether provided file belongs to one of the provided list of files
 </summary>
 <param name="file">The file.</param>
 <param name="requiredTypes">The required types.</param>
 <returns>
   <c>true</c> if file of the one of the provided types; otherwise, <c>false</c>.
 </returns>
</member>
<member name="M:XylonV2.FileTypeDetective.isFileOfTypes(System.IO.FileInfo,System.String)">
 <summary>
 Determines whether provided file belongs to one of the provided list of files,
 where list of files provided by string with Comma-Separated-Values of extensions
 </summary>
 <param name="file">The file.</param>
 <returns>
   <c>true</c> if file of the one of the provided types; otherwise, <c>false</c>.
 </returns>
</member>
<member name="M:XylonV2.FileTypeDetective.isType(System.IO.FileInfo,XylonV2.FileType)">
 <summary>
 Determines whether the specified file is of provided type
 </summary>
 <param name="file">The file.</param>
 <param name="type">The FileType</param>
 <returns>
   <c>true</c> if the specified file is type; otherwise, <c>false</c>.
 </returns>
</member>
<member name="M:XylonV2.FileTypeDetective.isType(System.String,XylonV2.FileType)">
 <summary>
 Determines whether the specified file is of provided type
 </summary>
 <param name="file">The file.</param>
 <param name="type">The FileType</param>
 <returns>
   <c>true</c> if the specified file is type; otherwise, <c>false</c>.
 </returns>
</member>
<member name="F:XylonV2.Engine.External.ResHacker.ResHacker_Location">
 <summary>
 Set the location of ResHacker executable [Default: ".\Reshacker.exe"].
 </summary>
</member>
<member name="F:XylonV2.Engine.External.ResHacker.ResHacker_Log_Location">
 <summary>
 Set the location of ResHacker log file [Default: ".\Reshacker.log"].
 </summary>
</member>
<member name="T:XylonV2.Engine.External.ResHacker.ResourceType">
 <summary>
 The most known ResourceTypes.
 </summary>
</member>
<member name="M:XylonV2.Engine.External.ResHacker.MainIcon_Extract(System.String,System.String)">
 <summary>
 Extract the main icon from file.
 </summary>
</member>
<member name="M:XylonV2.Engine.External.ResHacker.MainIcon_Delete(System.String,System.String)">
 <summary>
 Delete the main icon of file.
 </summary>
</member>
<member name="M:XylonV2.Engine.External.ResHacker.MainIcon_Replace(System.String,System.String,System.String)">
 <summary>
 Replace the main icon of file.
 </summary>
</member>
<member name="M:XylonV2.Engine.External.ResHacker.Resource_Add(System.String,System.String,System.String,XylonV2.Engine.External.ResHacker.ResourceType,System.String,System.Int32)">
 <summary>
 Add a resource to file.
 </summary>
</member>
<member name="M:XylonV2.Engine.External.ResHacker.Resource_Delete(System.String,System.String,XylonV2.Engine.External.ResHacker.ResourceType,System.String,System.Int32)">
 <summary>
 Delete a resource from file.
 </summary>
</member>
<member name="M:XylonV2.Engine.External.ResHacker.Resource_Extract(System.String,System.String,XylonV2.Engine.External.ResHacker.ResourceType,System.String,System.Int32)">
 <summary>
 Extract a resource from file.
 </summary>
</member>
<member name="M:XylonV2.Engine.External.ResHacker.Resource_Replace(System.String,System.String,System.String,XylonV2.Engine.External.ResHacker.ResourceType,System.String,System.Int32)">
 <summary>
 Replace a resource from file.
 </summary>
</member>
<member name="M:XylonV2.Engine.External.ResHacker.All_Resources_Extract(System.String,XylonV2.Engine.External.ResHacker.ResourceType,System.String)">
 <summary>
 Extract all kind of resource from file.
 </summary>
</member>
<member name="M:XylonV2.Engine.External.ResHacker.Run_Script(System.String)">
 <summary>
 Run a ResHacker script file.
 </summary>
</member>
<member name="M:XylonV2.Engine.External.ResHacker.Check_Last_Error">
 <summary>
 Return the last operation error if any [False = ERROR, True = Ok].
 </summary>
</member>
<member name="M:XylonV2.Engine.PE.Binary.PEChecker.GetFileVersion(System.String,System.Text.StringBuilder,System.Int32,System.Int32@)">
 <summary>
 Gets the common language runtime (CLR) version information of the specified file, using the specified buffer.
 </summary>
 <param name="filepath">Indicates the filepath of the file to be examined.</param>
 <param name="buffer">Indicates the buffer allocated for the version information that is returned.</param>
 <param name="buflen">Indicates the size, in wide characters, of the buffer.</param>
 <param name="written">Indicates the size, in bytes, of the returned buffer.</param>
 <returns>System.Int32.</returns>
</member>
<member name="M:XylonV2.Engine.PE.Binary.PEChecker.IsNetAssembly(System.String)">
 <summary>
 Determines whether an exe/dll file is an .Net assembly.
 </summary>
 <param name="File">Indicates the exe/dll file to check.</param>
 <returns><c>true</c> if file is an .Net assembly; otherwise, <c>false</c>.</returns>
</member>
<member name="T:XylonV2.Engine.Reg.RegEdit">
 <summary>
 Contains registry related methods.
 </summary>
</member>
<member name="T:XylonV2.Engine.Reg.RegEdit.ReginiUserAccess">
 <summary>
 Specifies an user identifier for Regini.exe application.
 </summary>
</member>
<member name="T:XylonV2.Engine.Reg.RegEdit.RegInfo`1">
 <summary>
 Defines a registry key with a specified type of data.
 </summary>
</member>
<member name="P:XylonV2.Engine.Reg.RegEdit.RegInfo`1.RootKeyName">
 <summary>
 Gets or sets the registry root key.
 ( eg: HKCU or HKEY_CURRENT_USER)
 </summary>
 <value>The registry root key.</value>
</member>
<member name="P:XylonV2.Engine.Reg.RegEdit.RegInfo`1.SubKeyPath">
 <summary>
 Gets or sets the registry subkey path.
 ( eg: subkey1\subkey2\ )
 </summary>
 <value>The registry subkey path.</value>
</member>
<member name="P:XylonV2.Engine.Reg.RegEdit.RegInfo`1.ValueName">
 <summary>
 Gets or sets the registry value name.
 </summary>
 <value>The registry value name.</value>
</member>
<member name="P:XylonV2.Engine.Reg.RegEdit.RegInfo`1.ValueType">
 <summary>
 Gets or sets the type of the registry value.
 </summary>
 <value>The type of the registry value.</value>
</member>
<member name="P:XylonV2.Engine.Reg.RegEdit.RegInfo`1.ValueData">
 <summary>
 Gets or sets the data of the registry value.
 </summary>
 <value>The data of the registry value.</value>
</member>
<member name="P:XylonV2.Engine.Reg.RegEdit.RegInfo`1.FullKeyPath">
 <summary>
 Gets the full key path.
 </summary>
 <value>The full key path.</value>
</member>
<member name="P:XylonV2.Engine.Reg.RegEdit.RegInfo`1.RegistryKey(Microsoft.Win32.RegistryKeyPermissionCheck,System.Security.AccessControl.RegistryRights)">
 <summary>
 Gets a <see cref="P:XylonV2.Engine.Reg.RegEdit.RegInfo`1.RegistryKey(Microsoft.Win32.RegistryKeyPermissionCheck,System.Security.AccessControl.RegistryRights)"/> instance of the current RootKey\SubKey.
 </summary>
 <value>A <see cref="P:XylonV2.Engine.Reg.RegEdit.RegInfo`1.RegistryKey(Microsoft.Win32.RegistryKeyPermissionCheck,System.Security.AccessControl.RegistryRights)"/> instance of the current RootKey\SubKey.</value>
</member>
<member name="T:XylonV2.Engine.Reg.RegEdit.RegInfo">
 <summary>
 Defines a registry key.
 </summary>
</member>
<member name="P:XylonV2.Engine.Reg.RegEdit.RegInfo.ValueData">
 <summary>
 Gets or sets the data of the registry value.
 </summary>
 <value>The data of the registry value.</value>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.CreateSubKey``1(System.String,System.String,Microsoft.Win32.RegistryKeyPermissionCheck,Microsoft.Win32.RegistryOptions)">
 <summary>
 Creates a new registry subkey.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="rootKeyName">The rootkey name.</param>
 <param name="subKeyPath">The subkey path.</param>
 <param name="registryKeyPermissionCheck">The registry key permission check.</param>
 <param name="registryOptions">The registry options.</param>
 <returns>The registry key.</returns>
 <exception cref="T:System.ArgumentNullException">rootKeyName or subKeyPath</exception>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.CreateSubKey``1(System.String,Microsoft.Win32.RegistryKeyPermissionCheck,Microsoft.Win32.RegistryOptions)">
 <summary>
 Creates a new registry subkey.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="fullKeyPath">The registry key full path.</param>
 <param name="registryKeyPermissionCheck">The registry key permission check.</param>
 <param name="registryOptions">The registry options.</param>
 <returns>The registry key.</returns>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.CreateSubKey``1(XylonV2.Engine.Reg.RegEdit.RegInfo{``0},Microsoft.Win32.RegistryKeyPermissionCheck,Microsoft.Win32.RegistryOptions)">
 <summary>
 Creates a new registry subkey.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="regInfo">A <see cref="T:XylonV2.Engine.Reg.RegEdit.RegInfo`1"/> instance containing the registry info.</param>
 <param name="registryKeyPermissionCheck">The registry key permission check.</param>
 <param name="registryOptions">The registry options.</param>
 <returns>The registry key.</returns>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.CreateSubKey(System.String,System.String,Microsoft.Win32.RegistryKeyPermissionCheck,Microsoft.Win32.RegistryOptions)">
 <summary>
 Creates a new registry subkey.
 </summary>
 <param name="rootKeyName">The rootkey name.</param>
 <param name="subKeyPath">The subkey path.</param>
 <param name="registryKeyPermissionCheck">The registry key permission check.</param>
 <param name="registryOptions">The registry options.</param>
 <returns>The registry key.</returns>
 <exception cref="T:System.ArgumentNullException">rootKeyName or subKeyPath</exception>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.CreateSubKey(System.String,Microsoft.Win32.RegistryKeyPermissionCheck,Microsoft.Win32.RegistryOptions)">
 <summary>
 Creates a new registry subkey.
 </summary>
 <param name="fullKeyPath">The registry key full path.</param>
 <param name="registryKeyPermissionCheck">The registry key permission check.</param>
 <param name="registryOptions">The registry options.</param>
 <returns>The registry key.</returns>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.CreateSubKey(XylonV2.Engine.Reg.RegEdit.RegInfo,Microsoft.Win32.RegistryKeyPermissionCheck,Microsoft.Win32.RegistryOptions)">
 <summary>
 Creates a new registry subkey.
 </summary>
 <param name="regInfo">A <see cref="T:XylonV2.Engine.Reg.RegEdit.RegInfo`1"/> instance containing the registry info.</param>
 <param name="registryKeyPermissionCheck">The registry key permission check.</param>
 <param name="registryOptions">The registry options.</param>
 <returns>The registry key.</returns>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.DeleteSubKey(System.String,System.String,System.Boolean)">
 <summary>
 Deletes a registry subkey.
 </summary>
 <param name="rootKeyName">The rootkey name.</param>
 <param name="subKeyPath">The subkey path.</param>
 <param name="throwOnMissingSubKey">If set to <c>true</c>, throws an exception on missing subkey.</param>
 <exception cref="T:System.ArgumentNullException">rootKeyName or subKeyPath</exception>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.DeleteSubKey(System.String,System.Boolean)">
 <summary>
 Deletes a registry subkey.
 </summary>
 <param name="fullKeyPath">The registry key full path.</param>
 <param name="throwOnMissingSubKey">If set to <c>true</c>, throws an exception on missing subkey.</param>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.DeleteSubKey``1(XylonV2.Engine.Reg.RegEdit.RegInfo{``0},System.Boolean)">
 <summary>
 Deletes a registry subkey.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="regInfo">A <see cref="T:XylonV2.Engine.Reg.RegEdit.RegInfo`1"/> instance containing the registry info.</param>
 <param name="throwOnMissingSubKey">If set to <c>true</c>, throws an exception on missing subkey.</param>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.CreateValue``1(System.String,System.String,System.String,``0,Microsoft.Win32.RegistryValueKind)">
 <summary>
 Creates or replaces a registry value.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="rootKeyName">The rootkey name.</param>
 <param name="subKeyPath">The subkey path.</param>
 <param name="valueName">The value name.</param>
 <param name="valueData">The value data.</param>
 <param name="valueType">The registry value type.</param>
 <exception cref="T:System.ArgumentNullException">rootKeyName or subKeyPath or valueName</exception>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.CreateValue``1(System.String,System.String,``0,Microsoft.Win32.RegistryValueKind)">
 <summary>
 Creates or replaces a registry value.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="fullKeyPath">The registry key full path.</param>
 <param name="valueName">The value name.</param>
 <param name="valueData">The value data.</param>
 <param name="valueType">The registry value type.</param>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.CreateValue``1(XylonV2.Engine.Reg.RegEdit.RegInfo{``0})">
 <summary>
 Creates or replaces a registry value.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="regInfo">A <see cref="T:XylonV2.Engine.Reg.RegEdit.RegInfo`1"/> instance containing the registry info.</param>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.DeleteValue(System.String,System.String,System.String,System.Boolean)">
 <summary>
 Deletes a registry subkey.
 </summary>
 <param name="rootKeyName">The rootkey name.</param>
 <param name="subKeyPath">The subkey path.</param>
 <param name="valueName">The value name.</param>
 <param name="throwOnMissingValue">If set to <c>true</c>, throws an exception on missing value.</param>
 <exception cref="T:System.ArgumentNullException">rootKeyName or subKeyPath or valueName</exception>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.DeleteValue(System.String,System.String,System.Boolean)">
 <summary>
 Deletes a registry subkey.
 </summary>
 <param name="fullKeyPath">The registry key full path.</param>
 <param name="valueName">The value name.</param>
 <param name="throwOnMissingValue">If set to <c>true</c>, throws an exception on missing value.</param>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.DeleteValue``1(XylonV2.Engine.Reg.RegEdit.RegInfo{``0},System.Boolean)">
 <summary>
 Deletes a registry subkey.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="regInfo">A <see cref="T:XylonV2.Engine.Reg.RegEdit.RegInfo`1"/> instance containing the registry info.</param>
 <param name="throwOnMissingValue">If set to <c>true</c>, throws an exception on missing value.</param>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.GetValueData``1(System.String,System.String,System.String,Microsoft.Win32.RegistryValueOptions)">
 <summary>
 Gets the data of a registry value.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="rootKeyName">The rootkey name.</param>
 <param name="subKeyPath">The subkey path.</param>
 <param name="valueName">The value name.</param>
 <param name="registryValueOptions">The registry value options.</param>
 <returns>The value data</returns>
 <exception cref="T:System.ArgumentNullException">rootKeyName or subKeyPath</exception>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.GetValueData``1(System.String,System.String,Microsoft.Win32.RegistryValueOptions)">
 <summary>
 Gets the data of a registry value.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="fullKeyPath">The registry key full path.</param>
 <param name="valueName">The value name.</param>
 <param name="registryValueOptions">The registry value options.</param>
 <returns>The value data</returns>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.GetValueData``1(XylonV2.Engine.Reg.RegEdit.RegInfo{``0},Microsoft.Win32.RegistryValueOptions)">
 <summary>
 Gets the data of a registry value.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="regInfo">A <see cref="T:XylonV2.Engine.Reg.RegEdit.RegInfo`1"/> instance containing the registry info.</param>
 <param name="registryValueOptions">The registry value options.</param>
 <returns>The value data</returns>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.GetValueData(System.String,System.String,System.String,Microsoft.Win32.RegistryValueOptions)">
 <summary>
 Gets the data of a registry value.
 </summary>
 <param name="rootKeyName">The rootkey name.</param>
 <param name="subKeyPath">The subkey path.</param>
 <param name="valueName">The value name.</param>
 <param name="registryValueOptions">The registry value options.</param>
 <returns>The value data</returns>
 <exception cref="T:System.ArgumentNullException">rootKeyName or subKeyPath or valueName</exception>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.GetValueData(System.String,System.String,Microsoft.Win32.RegistryValueOptions)">
 <summary>
 Gets the data of a registry value.
 </summary>
 <param name="fullKeyPath">The registry key full path.</param>
 <param name="valueName">The value name.</param>
 <param name="registryValueOptions">The registry value options.</param>
 <returns>The value data</returns>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.GetValueData(XylonV2.Engine.Reg.RegEdit.RegInfo,Microsoft.Win32.RegistryValueOptions)">
 <summary>
 Gets the data of a registry value.
 </summary>
 <param name="regInfo">A <see cref="T:XylonV2.Engine.Reg.RegEdit.RegInfo`1"/> instance containing the registry info.</param>
 <param name="registryValueOptions">The registry value options.</param>
 <returns>The value data</returns>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.ExistSubKey(System.String,System.String)">
 <summary>
 Determines whether a registry subkey exists.
 </summary>
 <param name="rootKeyName">The rootkey name.</param>
 <param name="subKeyPath">The subkey path.</param>
 <returns><c>true</c> if subkey exist, <c>false</c> otherwise.</returns>
 <exception cref="T:System.ArgumentNullException">rootKeyName or subKeyPath</exception>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.ExistSubKey(System.String)">
 <summary>
 Determines whether a registry subkey exists.
 </summary>
 <param name="fullKeyPath">The registry key full path.</param>
 <returns><c>true</c> if subkey exist, <c>false</c> otherwise.</returns>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.ExistValue(System.String,System.String,System.String)">
 <summary>
 Determines whether a registry value exists.
 </summary>
 <param name="rootKeyName">The rootkey name.</param>
 <param name="subKeyPath">The subkey path.</param>
 <param name="valueName">The value name.</param>
 <returns><c>true</c> if value exist, <c>false</c> otherwise.</returns>
 <exception cref="T:System.ArgumentNullException">rootKeyName or subKeyPath or valueName</exception>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.ExistValue(System.String,System.String)">
 <summary>
 Determines whether a registry subkey exists.
 </summary>
 <param name="fullKeyPath">The registry key full path.</param>
 <param name="valueName">The value name.</param>
 <returns><c>true</c> if subkey exist, <c>false</c> otherwise.</returns>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.ValueIsEmpty(System.String,System.String,System.String)">
 <summary>
 Determines whether a registry value is empty.
 </summary>
 <param name="rootKeyName">The rootkey name.</param>
 <param name="subKeyPath">The subkey path.</param>
 <param name="valueName">The value name.</param>
 <returns><c>true</c> if value is empty, <c>false</c> otherwise.</returns>
 <exception cref="T:System.ArgumentNullException">rootKeyName or subKeyPath or valueName</exception>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.ValueIsEmpty(System.String,System.String)">
 <summary>
 Determines whether a registry value is empty.
 </summary>
 <param name="fullKeyPath">The registry key full path.</param>
 <param name="valueName">The value name.</param>
 <returns><c>true</c> if value is empty, <c>false</c> otherwise.</returns>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.ImportRegFile(System.String)">
 <summary>
 Imports a registry file into the current registry Hive.
 </summary>
 <param name="regFilePath">The registry filepath.</param>
 <returns><c>true</c> if operation succeeds, <c>false</c> otherwise.</returns>
 <exception cref="T:System.ArgumentNullException">regFilePath</exception>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.ExportKey(System.String,System.String,System.String)">
 <summary>
 Exports a key to a registry file.
 </summary>
 <param name="rootKeyName">The rootkey name.</param>
 <param name="subKeyPath">The subkey path.</param>
 <param name="OutputFile">Indicates the output file.</param>
 <returns><c>true</c> if operation succeeds, <c>false</c> otherwise.</returns>
 <exception cref="T:System.ArgumentNullException">rootKeyName or subKeyPath or outputFile</exception>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.ExportKey(System.String,System.String)">
 <summary>
 Exports a key to a registry file.
 </summary>
 <param name="fullKeyPath">The registry key full path.</param>
 <param name="OutputFile">Indicates the output file.</param>
 <returns><c>true</c> if operation succeeds, <c>false</c> otherwise.</returns>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.JumpToKey(System.String,System.String)">
 <summary>
 Runs Regedit.exe process to jump at the specified key.
 </summary>
 <param name="rootKeyName">The rootkey name.</param>
 <param name="subKeyPath">The subkey path.</param>
 <exception cref="T:System.ArgumentNullException">rootKeyName or subKeyPath</exception>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.JumpToKey(System.String)">
 <summary>
 Runs Regedit.exe process to jump at the specified key.
 </summary>
 <param name="fullKeyPath">The registry key full path.</param>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.CopyValue(System.String,System.String,System.String,System.String)">
 <summary>
 Copies a registry value (with its data) to another subkey.
 </summary>
 <param name="sourceFullKeyPath">The source registry key full path.</param>
 <param name="sourceValueName">The source registry value name.</param>
 <param name="targetFullKeyPath">The target registry key full path.</param>
 <param name="targetValueName">The target registry value name.</param>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.CopyValue(System.String,System.String,System.String,System.String,System.String,System.String)">
 <summary>
 Copies a registry value (with its data) to another subkey.
 </summary>
 <param name="sourceRootKeyName">The source registry rootkey name.</param>
 <param name="sourceSubKeyPath">The source registry subkey path.</param>
 <param name="sourceValueName">The source registry value name.</param>
 <param name="targetRootKeyName">The target registry rootkey name.</param>
 <param name="targetSubKeyPath">The target registry subkey path.</param>
 <param name="targetValueName">The target registry value name.</param>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.MoveValue(System.String,System.String,System.String,System.String)">
 <summary>
 Moves a registry value (with its data) to another subkey.
 </summary>
 <param name="sourceFullKeyPath">The source registry key full path.</param>
 <param name="sourceValueName">The source registry value name.</param>
 <param name="targetFullKeyPath">The target registry key full path.</param>
 <param name="targetValueName">The target registry value name.</param>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.MoveValue(System.String,System.String,System.String,System.String,System.String,System.String)">
 <summary>
 Moves a registry value (with its data) to another subkey.
 </summary>
 <param name="sourceRootKeyName">The source registry rootkey name.</param>
 <param name="sourceSubKeyPath">The source registry subkey path.</param>
 <param name="sourceValueName">The source registry value name.</param>
 <param name="targetRootKeyName">The target registry rootkey name.</param>
 <param name="targetSubKeyPath">The target registry subkey path.</param>
 <param name="targetValueName">The target registry value name.</param>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.CopyKeyTree(System.String,System.String,System.String,System.String)">
 <summary>
 Copies a registry key tree to another registry path.
 </summary>
 <param name="sourceRootKeyName">The source registry rootkey name.</param>
 <param name="sourceSubKeyPath">The source registry subkey path.</param>
 <param name="targetRootKeyName">The target registry rootkey name.</param>
 <param name="targetSubKeyPath">The target registry subkey path.</param>
 <exception cref="T:System.ArgumentNullException">
 sourceRootKeyName or sourceSubKeyPath or targetRootKeyName or targetSubKeyPath
 </exception>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.CopyKeyTree(System.String,System.String)">
 <summary>
 Copies a registry key tree to another registry path.
 </summary>
 <param name="sourceFullKeyPath">The source registry key full path.</param>
 <param name="targetFullKeyPath">The target registry key full path.</param>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.CopySubKeys(Microsoft.Win32.RegistryKey,Microsoft.Win32.RegistryKey)">
 <summary>
 Copies the sub-keys of the specified registry key.
 </summary>
 <param name="sourceRegistryKey">Indicates the old key.</param>
 <param name="targetRegistryKey">Indicates the new key.</param>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.CopySubKeys(System.String,System.String,System.String,System.String)">
 <summary>
 Copies the sub-keys of the specified registry key.
 </summary>
 <param name="sourceRootKeyName">The source registry rootkey name.</param>
 <param name="sourceSubKeyPath">The source registry subkey path.</param>
 <param name="targetRootKeyName">The target registry rootkey name.</param>
 <param name="targetSubKeyPath">The target registry subkey path.</param>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.CopySubKeys(System.String,System.String)">
 <summary>
 Copies the sub-keys of the specified registry key.
 </summary>
 <param name="sourceFullKeyPath">The source registry key full path.</param>
 <param name="targetFullKeyPath">The target registry key full path.</param>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.MoveKeyTree(System.String,System.String,System.String,System.String)">
 <summary>
 Moves a registry key tree to another registry path.
 </summary>
 <param name="sourceRootKeyName">The source registry rootkey name.</param>
 <param name="sourceSubKeyPath">The source registry subkey path.</param>
 <param name="targetRootKeyName">The target registry rootkey name.</param>
 <param name="targetSubKeyPath">The target registry subkey path.</param>
 <exception cref="T:System.ArgumentNullException">
 sourceRootKeyName or sourceSubKeyPath or targetRootKeyName or targetSubKeyPath
 </exception>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.MoveKeyTree(System.String,System.String)">
 <summary>
 Moves a registry key tree to another registry path.
 </summary>
 <param name="sourceFullKeyPath">The source registry key full path.</param>
 <param name="targetFullKeyPath">The target registry key full path.</param>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.MoveSubKeys(System.String,System.String,System.String,System.String)">
 <summary>
 Moves the sub-keys of the specified registry key.
 </summary>
 <param name="sourceRootKeyName">The source registry rootkey name.</param>
 <param name="sourceSubKeyPath">The source registry subkey path.</param>
 <param name="targetRootKeyName">The target registry rootkey name.</param>
 <param name="targetSubKeyPath">The target registry subkey path.</param>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.MoveSubKeys(System.String,System.String)">
 <summary>
 Moves the sub-keys of the specified registry key.
 </summary>
 <param name="sourceFullKeyPath">The source registry key full path.</param>
 <param name="targetFullKeyPath">The target registry key full path.</param>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.GetRootKey(System.String)">
 <summary>
 Gets the root <see cref="T:Microsoft.Win32.RegistryKey"/> of a registry path.
 </summary>
 <returns>The root <see cref="T:Microsoft.Win32.RegistryKey"/> of a registry path.</returns>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.GetRootKeyName(System.String)">
 <summary>
 Gets the root key name of a registry path.
 </summary>
 <returns>The root key name of a registry path.</returns>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.GetSubKeyPath(System.String)">
 <summary>
 Gets the subkey path of a registry path.
 </summary>
 <returns>The root <see cref="T:Microsoft.Win32.RegistryKey"/> of a key-path.</returns>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.FindSubKey(System.String,System.String,System.String,System.Boolean,System.Boolean,System.IO.SearchOption)">
 <summary>
 Finds on a registry path all the subkey names that matches the specified criteria.
 </summary>
 <param name="rootKeyName">The rootkey name.</param>
 <param name="subKeyPath">The subkey path.</param>
 <param name="subKeyName">The subkey name to find.</param>
 <param name="matchFullSubKeyName">If set to <c>true</c>, matches all the subkey name, otherwise matches a part of the name.</param>
 <param name="ignoreCase">If set to <c>true</c>, performs a non-sensitive stringcase comparison.</param>
 <param name="searchOption">The search mode.</param>
 <returns>IEnumerable(Of RegInfo).</returns>
 <exception cref="T:System.ArgumentNullException">rootKeyName or subKeyPath or subKeyName</exception>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.FindSubKey(System.String,System.String,System.Boolean,System.Boolean,System.IO.SearchOption)">
 <summary>
 Finds on a registry path all the subkey names that matches the specified criteria.
 </summary>
 <param name="fullKeyPath">The registry key full path.</param>
 <param name="subKeyName">The subkey name to find.</param>
 <param name="matchFullSubKeyName">If set to <c>true</c>, matches all the subkey name, otherwise matches a part of the name.</param>
 <param name="ignoreCase">If set to <c>true</c>, performs a non-sensitive stringcase comparison.</param>
 <param name="searchOption">The search mode.</param>
 <returns>IEnumerable(Of RegInfo).</returns>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.FindValue(System.String,System.String,System.String,System.Boolean,System.Boolean,System.IO.SearchOption)">
 <summary>
 Finds on a registry path all the value names that matches the specified criteria.
 </summary>
 <param name="rootKeyName">The rootkey name.</param>
 <param name="subKeyPath">The subkey path.</param>
 <param name="valueName">The value name to find.</param>
 <param name="matchFullValueName">If set to <c>true</c>, matches all the value name, otherwise matches a part of the name.</param>
 <param name="ignoreCase">If set to <c>true</c>, performs a non-sensitive stringcase comparison.</param>
 <param name="searchOption">The search mode.</param>
 <returns>IEnumerable(Of RegInfo).</returns>
 <exception cref="T:System.ArgumentNullException">rootKeyName or subKeyPath or subKeyName</exception>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.FindValue(System.String,System.String,System.Boolean,System.Boolean,System.IO.SearchOption)">
 <summary>
 Finds on a registry path all the value names that matches the specified criteria.
 </summary>
 <param name="fullKeyPath">The registry key full path.</param>
 <param name="valueName">The value name to find.</param>
 <param name="matchFullValueName">If set to <c>true</c>, matches all the value name, otherwise matches a part of the name.</param>
 <param name="ignoreCase">If set to <c>true</c>, performs a non-sensitive stringcase comparison.</param>
 <param name="searchOption">The search mode.</param>
 <returns>IEnumerable(Of RegInfo).</returns>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.FindValueData(System.String,System.String,System.String,System.Boolean,System.Boolean,System.IO.SearchOption)">
 <summary>
 Finds on a registry path all the values that contains data that matches the specified criteria.
 </summary>
 <param name="rootKeyName">The rootkey name.</param>
 <param name="subKeyPath">The subkey path.</param>
 <param name="valueData">The data to find.</param>
 <param name="matchFullData">If set to <c>true</c>, matches all the data, otherwise matches a part of the data.</param>
 <param name="ignoreCase">If set to <c>true</c>, performs a non-sensitive stringcase comparison (for String data).</param>
 <param name="searchOption">The search mode.</param>
 <returns>IEnumerable(Of RegInfo).</returns>
 <exception cref="T:System.ArgumentNullException">rootKeyName or subKeyPath or subKeyName</exception>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.SetUserAccessKey(System.String,System.String,XylonV2.Engine.Reg.RegEdit.ReginiUserAccess[])">
 <summary>
 Modifies the user permissions of a registry key.
 </summary>
 <param name="rootKeyName">The rootkey name.</param>
 <param name="subKeyPath">The subkey path.</param>
 <param name="userAccess">The user access.</param>
 <returns><c>true</c> if operation succeeds, <c>false</c> otherwise.</returns>
 <exception cref="T:System.ArgumentNullException">rootKeyName or subKeyPath</exception>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.SetUserAccessKey(System.String,XylonV2.Engine.Reg.RegEdit.ReginiUserAccess[])">
 <summary>
 Modifies the user permissions of a registry key.
 </summary>
 <param name="fullKeyPath">The registry key full path.</param>
 <param name="userAccess">The user access.</param>
 <returns><c>true</c> if operation succeeds, <c>false</c> otherwise.</returns>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.CollectSubKeys(Microsoft.Win32.RegistryKey,System.IO.SearchOption)">
 <summary>
 Collects the subkeys on the specified registry path.
 </summary>
 <param name="sourceRegistryKey">The source registry key.</param>
 <param name="searchOption">The search mode.</param>
 <returns>IEnumerable(Of System.String).</returns>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.CollectValues(Microsoft.Win32.RegistryKey,System.IO.SearchOption)">
 <summary>
 Collects the values on the specified registry path.
 </summary>
 <param name="sourceRegistryKey">The source registry key.</param>
 <param name="searchOption">The search mode.</param>
 <returns>IEnumerable(Of RegInfo).</returns>
</member>
<member name="M:XylonV2.Engine.Reg.RegEdit.CollectValueDatas(Microsoft.Win32.RegistryKey,System.IO.SearchOption)">
 <summary>
 Collects the value datas on the specified registry path.
 </summary>
 <param name="sourceRegistryKey">The source registry key.</param>
 <param name="searchOption">The search mode.</param>
 <returns>IEnumerable(Of RegInfo).</returns>
</member>
<member name="T:XylonV2.ServiceUtils">
 <summary>
 Contains related Windows service tools.
 </summary>
</member>
<member name="T:XylonV2.ServiceUtils.SvcStatus">
 <summary>
 Indicates the status of a service.
 </summary>
</member>
<member name="F:XylonV2.ServiceUtils.SvcStatus.Start">
 <summary>
 The service is running.
 </summary>
</member>
<member name="F:XylonV2.ServiceUtils.SvcStatus.Stop">
 <summary>
 The service is stopped.
 </summary>
</member>
<member name="T:XylonV2.ServiceUtils.SvcStartMode">
 <summary>
 Indicates the start mode of a service.
 </summary>
</member>
<member name="F:XylonV2.ServiceUtils.SvcStartMode.Undefinied">
 <summary>
 Indicates that the service has not a start mode defined.
 Since a service should have a start mode defined, this means an error occured retrieving the start mode.
 </summary>
</member>
<member name="F:XylonV2.ServiceUtils.SvcStartMode.AutomaticDelayed">
 <summary>
 Indicates that the service is to be started (or was started) by the operating system, at system start-up.
 The service is started after other auto-start services are started plus a short delay.
 </summary>
</member>
<member name="F:XylonV2.ServiceUtils.SvcStartMode.Automatic">
 <summary>
 Indicates that the service is to be started (or was started) by the operating system, at system start-up. 
 If an automatically started service depends on a manually started service, 
 the manually started service is also started automatically at system startup.
 </summary>
</member>
<member name="F:XylonV2.ServiceUtils.SvcStartMode.Manual">
 <summary>
 Indicates that the service is started only manually, 
 by a user (using the Service Control Manager) or by an application.
 </summary>
</member>
<member name="F:XylonV2.ServiceUtils.SvcStartMode.Disabled">
 <summary>
 Indicates that the service is disabled, so that it cannot be started by a user or application.
 </summary>
</member>
<member name="M:XylonV2.ServiceUtils.GetServices">
 <summary>
 Retrieves all the services on the local computer, except for the device driver services.
 </summary>
 <returns>IEnumerable(Of ServiceController).</returns>
</member>
<member name="M:XylonV2.ServiceUtils.GetName(System.String)">
 <summary>
 Gets the name of a service.
 </summary>
 <param name="svcDisplayName">The service's display name.</param>
 <returns>The service name.</returns>
 <exception cref="T:System.ArgumentException">Any service found with the specified display name.;svcDisplayName</exception>
</member>
<member name="M:XylonV2.ServiceUtils.GetDisplayName(System.String)">
 <summary>
 Gets the display name of a service.
 </summary>
 <param name="svcName">The service name.</param>
 <returns>The service's display name.</returns>
 <exception cref="T:System.ArgumentException">Any service found with the specified name.;svcName</exception>
</member>
<member name="M:XylonV2.ServiceUtils.GetStatus(System.String)">
 <summary>
 Gets the status of a service.
 </summary>
 <param name="svcName">The service name.</param>
 <returns>The service status.</returns>
 <exception cref="T:System.ArgumentException">Any service found with the specified name.;svcName</exception>
</member>
<member name="M:XylonV2.ServiceUtils.GetStartMode(System.String)">
 <summary>
 Gets the start mode of a service.
 </summary>
 <param name="svcName">The service name.</param>
 <returns>The service's start mode.</returns>
 <exception cref="T:System.ArgumentException">Any service found with the specified name.</exception>
 <exception cref="T:System.Exception">Registry value "Start" not found for service.</exception>
 <exception cref="T:System.Exception">Registry value "DelayedAutoStart" not found for service.</exception>
</member>
<member name="M:XylonV2.ServiceUtils.GetStartMode(System.ServiceProcess.ServiceController)">
 <summary>
 Gets the start mode of a service.
 </summary>
 <param name="svc">The service.</param>
 <returns>The service's start mode.</returns>
</member>
<member name="M:XylonV2.ServiceUtils.SetStartMode(System.String,XylonV2.ServiceUtils.SvcStartMode)">
 <summary>
 Sets the start mode of a service.
 </summary>
 <param name="svcName">The service name.</param>
 <param name="startMode">The start mode.</param>
 <exception cref="T:System.ArgumentException">Any service found with the specified name.</exception>
 <exception cref="T:System.ArgumentException">Unexpected value.</exception>
</member>
<member name="M:XylonV2.ServiceUtils.SetStartMode(System.ServiceProcess.ServiceController,XylonV2.ServiceUtils.SvcStartMode)">
 <summary>
 Sets the start mode of a service.
 </summary>
 <param name="svc">The service.</param>
 <param name="startMode">The start mode.</param>
</member>
<member name="M:XylonV2.ServiceUtils.SetStatus(System.String,XylonV2.ServiceUtils.SvcStatus,System.Boolean,System.Boolean)">
 <summary>
 Sets the status of a service.
 </summary>
 <param name="svcName">The service name.</param>
 <param name="status">The desired service status.</param>
 <param name="wait">if set to <c>true</c> waits for the status change completition.</param>
 <param name="throwOnStatusMissmatch">
 If set to <c>true</c> throws an error when attempting to start a service that is started, 
 or attempting to stop a service that is stopped.
 </param>
 <exception cref="T:System.ArgumentException">Any service found with the specified name.;svcName</exception>
 <exception cref="T:System.ArgumentException">Cannot start service because it is disabled.</exception>
 <exception cref="T:System.ArgumentException">Cannot start service because a dependant service is disabled.</exception>
 <exception cref="T:System.ArgumentException">The service is already running or pendng to run it.</exception>
 <exception cref="T:System.ArgumentException">The service is already stopped or pendng to stop it.</exception>
 <exception cref="T:System.ArgumentException">Unexpected enumeration value.</exception>
 <exception cref="T:System.Exception"></exception>
</member>
<member name="M:XylonV2.AVTester.DefenderMon_DefenderStatusChanged(System.Object,XylonV2.Core.Engine.Watcher.DefenderWatcher.DefenderStatusChangedEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:XylonV2.Core.Engine.Watcher.DefenderWatcher.DefenderStatusChanged"/> event of the <see cref="P:XylonV2.AVTester.DefenderMon"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="T:XylonV2.Core.Engine.Watcher.DefenderWatcher.DefenderStatusChangedEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.TesterPendrive.DriveMon_DriveStatusChanged(System.Object,XylonV2.Core.Engine.Watcher.DriveWatcher.DriveStatusChangedEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:XylonV2.Core.Engine.Watcher.DriveWatcher.DriveStatusChanged"/> event of the <see cref="P:XylonV2.TesterPendrive.DriveMon"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="T:XylonV2.Core.Engine.Watcher.DriveWatcher.DriveStatusChangedEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:XylonV2.ProcessTester.ProcessMon_ProcessStatusChanged(System.Object,XylonV2.Core.Engine.Watcher.ProcessWatcher.ProcessStatusChangedEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:XylonV2.Core.Engine.Watcher.ProcessWatcher.ProcessStatusChanged"/> event of the <see cref="P:XylonV2.ProcessTester.ProcessMon"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="T:XylonV2.Core.Engine.Watcher.ProcessWatcher.ProcessStatusChangedEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
</members>
</doc>
